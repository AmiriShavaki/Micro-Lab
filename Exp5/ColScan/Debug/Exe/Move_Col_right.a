;// must run on Matrix_5x7_Col
;// Moving an Arrow
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;const unsigned char Code[]=
;{
;	0xFF,	//	0001		# # # # # # # #
;	0xFF,	//	0002		# # # # # # # #
;	0xFF,	//	0003		# # # # # # # #
;	0xFF,	//	0004		# # # # # # # #
;	0xFF,	//	0005		# # # # # # # #
;
;	0xF7,	//	0004        # # # # . # # #
;    0xF7,    //    0005        # # # # . # # #
;    0xD5,    //    0006        # # . # . # . #
;    0xE3,    //    0007        # # # . . . # #
;    0xF7,     //    0008        # # # # . # # #
;
;    0xFF,   //  0011        # # # # # # # #
;    0xFF,   //  0012        # # # # # # # #
;    0xFF,   //  0013        # # # # # # # #
;    0xFF,   //  0014        # # # # # # # #
;    0xFF,   //  0015        # # # # # # # #
;};
;void main(void)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 001C unsigned char Col,Scan,Refresh,Index,S,R;
; 0000 001D DDRC=0xFF;
;	Col -> R17
;	Scan -> R16
;	Refresh -> R19
;	Index -> R18
;	S -> R21
;	R -> R20
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001E DDRD=0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001F 
; 0000 0020 while (1)
;PCODE: $00000012 VOL: 0
; 0000 0021       {
; 0000 0022       // Place your code here
; 0000 0023       for (S=0; S<10; S++)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0024       {
; 0000 0025         R = 9 - S;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0026         for (Refresh=1; Refresh<11; Refresh++)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0027         {
; 0000 0028             Scan = 0b00000001;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0029             for (Col=0; Col<5; Col++)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002A             {
; 0000 002B                 Index = R + Col;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002C                 PORTD = Code[Index];
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 002D                 PORTC = Scan;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002E                 delay_ms(4);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002F                 Scan = Scan << 1;
;PCODE: $00000040 VOL: 0
; 0000 0030                 PORTC = 0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0031             }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0032         }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0033       }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0034       }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0035 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
