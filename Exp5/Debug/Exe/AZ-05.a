;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 3/15/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;const unsigned char Code[80]=
;{
;    0xFF,    //    0001        # # # # # # # #
;    0x81,    //    0002        # . . . . . . #
;    0xEE,    //    0003        # # # . # # # .
;    0xEE,    //    0004        # # # . # # # .
;    0xEE,    //    0005        # # # . # # # .
;    0x81,    //    0006        # . . . . . . #
;    0xFF,    //    0007        # # # # # # # #
;    0xFF,    //    0008        # # # # # # # #
;    0xFF,    //    0009        # # # # # # # #
;    0xFF,    //    000A        # # # # # # # #
;    0xFF,    //    000B        # # # # # # # #
;    0xFF,    //    000C        # # # # # # # #
;    0xFF,    //    000D        # # # # # # # #
;    0x80,    //    000E        # . . . . . . .
;    0xB6,    //    000F        # . # # . # # .
;    0xB6,    //    0010        # . # # . # # .
;    0xB6,    //    0011        # . # # . # # .
;    0xC9,    //    0012        # # . . # . . #
;    0xFF,    //    0013        # # # # # # # #
;    0xFF,    //    0014        # # # # # # # #
;    0xFF,    //    0015        # # # # # # # #
;    0xFF,    //    0016        # # # # # # # #
;    0xFF,    //    0017        # # # # # # # #
;    0xFF,    //    0018        # # # # # # # #
;    0xFF,    //    0019        # # # # # # # #
;    0xC1,    //    001A        # # . . . . . #
;    0xBE,    //    001B        # . # # # # # .
;    0xBE,    //    001C        # . # # # # # .
;    0xBE,    //    001D        # . # # # # # .
;    0xDD,    //    001E        # # . # # # . #
;    0xFF,    //    001F        # # # # # # # #
;    0xFF,    //    0020        # # # # # # # #
;    0xFF,    //    0021        # # # # # # # #
;    0xFF,    //    0022        # # # # # # # #
;    0xFF,    //    0023        # # # # # # # #
;    0xFF,    //    0024        # # # # # # # #
;    0xFF,    //    0025        # # # # # # # #
;    0x80,    //    0026        # . . . . . . .
;    0xBE,    //    0027        # . # # # # # .
;    0xBE,    //    0028        # . # # # # # .
;    0xBE,    //    0029        # . # # # # # .
;    0xC1,    //    002A        # # . . . . . #
;    0xFF,    //    002B        # # # # # # # #
;    0xFF,    //    002C        # # # # # # # #
;    0xFF,    //    002D        # # # # # # # #
;    0xFF,    //    002E        # # # # # # # #
;    0xFF,    //    002F        # # # # # # # #
;    0xFF,    //    0030        # # # # # # # #
;    0xFF,    //    0031        # # # # # # # #
;    0x80,    //    0032        # . . . . . . .
;    0xB6,    //    0033        # . # # . # # .
;    0xB6,    //    0034        # . # # . # # .
;    0xB6,    //    0035        # . # # . # # .
;    0xBE,    //    0036        # . # # # # # .
;    0xFF,    //    0037        # # # # # # # #
;    0xFF,    //    0038        # # # # # # # #
;    0xFF,    //    0039        # # # # # # # #
;    0xFF,    //    003A        # # # # # # # #
;    0xFF,    //    003B        # # # # # # # #
;    0xFF,    //    003C        # # # # # # # #
;    0xFF,    //    003D        # # # # # # # #
;    0x80,    //    003E        # . . . . . . .
;    0xF6,    //    003F        # # # # . # # .
;    0xF6,    //    0040        # # # # . # # .
;	0xF6,	//	0041		# # # # . # # .
;	0xFE,	//	0042		# # # # # # # .
;	0xFF,	//	0043		# # # # # # # #
;	0xFF,	//	0044		# # # # # # # #
;	0xFF,	//	0045		# # # # # # # #
;	0xFF,	//	0046		# # # # # # # #
;	0xFF,	//	0047		# # # # # # # #
;	0xFF,	//	0048		# # # # # # # #
;	0xFF,	//	0043		# # # # # # # #
;	0xFF,	//	0044		# # # # # # # #
;	0xFF,	//	0045		# # # # # # # #
;	0xFF,	//	0046		# # # # # # # #
;	0xFF,	//	0047		# # # # # # # #
;	0xFF,	//	0048		# # # # # # # #
;    0xFF,	//	0047		# # # # # # # #
;	0xFF,	//	0048		# # # # # # # #
;};
;
;void main(void)
; 0000 0070 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0071 
; 0000 0072 // Input/Output Ports initialization
; 0000 0073 // Port A initialization
; 0000 0074 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0075 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0076 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0077 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0078 
; 0000 0079 // Port B initialization
; 0000 007A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 007B DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 007C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 007D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 007E 
; 0000 007F // Port C initialization
; 0000 0080 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0081 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0082 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0083 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0084 
; 0000 0085 // Port D initialization
; 0000 0086 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0087 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0088 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0089 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 008A 
; 0000 008B while (1) {
;PCODE: $0000001E VOL: 0
; 0000 008C 
; 0000 008D     unsigned long i, offset = 4000000 + 65;
; 0000 008E     for (; offset >= 0; offset--) {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;	i -> Y+4
;	offset -> Y+0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 008F         int repeat = 0;
; 0000 0090         for (; repeat < 5; repeat++) {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;	i -> Y+6
;	offset -> Y+2
;	repeat -> Y+0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0091             unsigned long scan = 0b01;
; 0000 0092             PORTB = 0; //C9-C16
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;	i -> Y+10
;	offset -> Y+6
;	repeat -> Y+4
;	scan -> Y+0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0093             for (i = 0; i < 8; i++) {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0094                 PORTD = scan & 0xFF;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0095                 PORTC = Code[(i + offset) % 80];
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0096                 scan <<= 1;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0097                 delay_ms(2);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0098             }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0099             PORTD = 0; //C1-C8
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009A             for (i = 8; i < 16; i++) {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009B                 PORTB = scan >> 8;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 009C                 PORTC = Code[(i + offset) % 80];
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 009D                 scan <<= 1;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 009E                 delay_ms(2);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 009F             }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A0         }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A1     }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00A2 
; 0000 00A3 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00A4 
; 0000 00A5 }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
