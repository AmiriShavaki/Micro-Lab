
AVRASM ver. 2.1.30  C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm Sat May 28 11:37:15 2022

C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\cronometer\Debug\List\cronometer.asm(1095): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hr=R5
                 	.DEF _min=R4
                 	.DEF _sec=R7
                 	.DEF _decsec=R6
                 	.DEF _running=R9
                 	.DEF __lcd_x=R8
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0087 	JMP  _ext_int0_isr
000004 940c 0091 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00a0 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002d 6954
00002e 656d
00002f 0072      	.DB  0x54,0x69,0x6D,0x65,0x72,0x0
                 _0x2000003:
000030 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000031 0006      	.DW  0x06
000032 0004      	.DW  0x04
000033 0054      	.DW  __REG_VARS*2
                 
000034 0006      	.DW  0x06
000035 0260      	.DW  _0xC
000036 005a      	.DW  _0x0*2
                 
000037 0002      	.DW  0x02
000038 0266      	.DW  __base_y_G100
000039 0060      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 00dd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;unsigned char hr = 0, min = 0, sec = 0, decsec = 0, running = 0;
                 ;
                 ;void tick() {
                 ; 0000 0008 void tick() {
                 
                 	.CSEG
                 _tick:
                 ; .FSTART _tick
                 ; 0000 0009     if (decsec < 9) {
000068 e0e9      	LDI  R30,LOW(9)
000069 166e      	CP   R6,R30
00006a f410      	BRSH _0x3
                 ; 0000 000A         decsec++;
00006b 9463      	INC  R6
                 ; 0000 000B     } else if (sec < 59) {
00006c c019      	RJMP _0x4
                 _0x3:
00006d e3eb      	LDI  R30,LOW(59)
00006e 167e      	CP   R7,R30
00006f f418      	BRSH _0x5
                 ; 0000 000C         decsec = 0;
000070 2466      	CLR  R6
                 ; 0000 000D         sec++;
000071 9473      	INC  R7
                 ; 0000 000E     } else if (min < 59) {
000072 c013      	RJMP _0x6
                 _0x5:
000073 e3eb      	LDI  R30,LOW(59)
000074 164e      	CP   R4,R30
000075 f420      	BRSH _0x7
                 ; 0000 000F         decsec = 0;
000076 2466      	CLR  R6
                 ; 0000 0010         sec = 0;
000077 2477      	CLR  R7
                 ; 0000 0011         min++;
000078 9443      	INC  R4
                 ; 0000 0012     } else if (hr < 23) {
000079 c00c      	RJMP _0x8
                 _0x7:
00007a e1e7      	LDI  R30,LOW(23)
00007b 165e      	CP   R5,R30
00007c f428      	BRSH _0x9
                 ; 0000 0013         decsec = 0;
00007d 2466      	CLR  R6
                 ; 0000 0014         sec = 0;
00007e 2477      	CLR  R7
                 ; 0000 0015         min = 0;
00007f 2444      	CLR  R4
                 ; 0000 0016         hr++;
000080 9453      	INC  R5
                 ; 0000 0017     } else {
000081 c004      	RJMP _0xA
                 _0x9:
                 ; 0000 0018         decsec = 0;
000082 2466      	CLR  R6
                 ; 0000 0019         sec = 0;
000083 2477      	CLR  R7
                 ; 0000 001A         min = 0;
000084 2444      	CLR  R4
                 ; 0000 001B         hr = 0;
000085 2455      	CLR  R5
                 ; 0000 001C     }
                 _0xA:
                 _0x8:
                 _0x6:
                 _0x4:
                 ; 0000 001D }
000086 9508      	RET
                 ; .FEND
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0021 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000087 93ea      	ST   -Y,R30
000088 b7ef      	IN   R30,SREG
000089 93ea      	ST   -Y,R30
                 ; 0000 0022 running = 1 - running;
00008a e0e1      	LDI  R30,LOW(1)
00008b 19e9      	SUB  R30,R9
00008c 2e9e      	MOV  R9,R30
                 ; 0000 0023 }
00008d 91e9      	LD   R30,Y+
00008e bfef      	OUT  SREG,R30
00008f 91e9      	LD   R30,Y+
000090 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0027 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000091 93ea      	ST   -Y,R30
000092 b7ef      	IN   R30,SREG
                 ; 0000 0028         decsec = 0;
000093 2466      	CLR  R6
                 ; 0000 0029         sec = 0;
000094 2477      	CLR  R7
                 ; 0000 002A         min = 0;
000095 2444      	CLR  R4
                 ; 0000 002B         hr = 0;
000096 2455      	CLR  R5
                 ; 0000 002C }
000097 bfef      	OUT  SREG,R30
000098 91e9      	LD   R30,Y+
000099 9518      	RETI
                 ; .FEND
                 ;
                 ;void putnum(int n) {
                 ; 0000 002E void putnum(int n) {
                 _putnum:
                 ; .FSTART _putnum
                 ; 0000 002F     lcd_putchar('0' + n);
00009a 93ba      	ST   -Y,R27
00009b 93aa      	ST   -Y,R26
                 ;	n -> Y+0
00009c 81a8      	LD   R26,Y
00009d 5da0      	SUBI R26,-LOW(48)
00009e d098      	RCALL _lcd_putchar
                 ; 0000 0030 }
00009f c08b      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0034 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000a0 920a      	ST   -Y,R0
0000a1 921a      	ST   -Y,R1
0000a2 92fa      	ST   -Y,R15
0000a3 936a      	ST   -Y,R22
0000a4 937a      	ST   -Y,R23
0000a5 938a      	ST   -Y,R24
0000a6 939a      	ST   -Y,R25
0000a7 93aa      	ST   -Y,R26
0000a8 93ba      	ST   -Y,R27
0000a9 93ea      	ST   -Y,R30
0000aa 93fa      	ST   -Y,R31
0000ab b7ef      	IN   R30,SREG
0000ac 93ea      	ST   -Y,R30
                 ; 0000 0035 // Reinitialize Timer1 value
                 ; 0000 0036 TCNT1H=0x3CB0 >> 8;
0000ad e3ec      	LDI  R30,LOW(60)
0000ae bded      	OUT  0x2D,R30
                 ; 0000 0037 TCNT1L=0x3CB0 & 0xff;
0000af ebe0      	LDI  R30,LOW(176)
0000b0 bdec      	OUT  0x2C,R30
                 ; 0000 0038 
                 ; 0000 0039 if (running) {
0000b1 2099      	TST  R9
0000b2 f009      	BREQ _0xB
                 ; 0000 003A     tick();
0000b3 dfb4      	RCALL _tick
                 ; 0000 003B }
                 ; 0000 003C     lcd_clear();
                 _0xB:
0000b4 d078      	RCALL _lcd_clear
                 ; 0000 003D     lcd_gotoxy(6, 0);
0000b5 e0e6      	LDI  R30,LOW(6)
0000b6 93ea      	ST   -Y,R30
0000b7 e0a0      	LDI  R26,LOW(0)
0000b8 d067      	RCALL _lcd_gotoxy
                 ; 0000 003E     lcd_puts("Timer");
                +
0000b9 e6a0     +LDI R26 , LOW ( _0xC + ( 0 ) )
0000ba e0b2     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
0000bb d090      	RCALL _lcd_puts
                 ; 0000 003F     lcd_gotoxy(3, 1);
0000bc e0e3      	LDI  R30,LOW(3)
0000bd 93ea      	ST   -Y,R30
0000be e0a1      	LDI  R26,LOW(1)
0000bf d060      	RCALL _lcd_gotoxy
                 ; 0000 0040     putnum(hr / 10);
0000c0 2da5      	MOV  R26,R5
0000c1 d0c6      	RCALL SUBOPT_0x0
                 ; 0000 0041     putnum(hr % 10);
0000c2 2da5      	MOV  R26,R5
0000c3 d0cb      	RCALL SUBOPT_0x1
                 ; 0000 0042     lcd_putchar(':');
                 ; 0000 0043     putnum(min / 10);
0000c4 2da4      	MOV  R26,R4
0000c5 d0c2      	RCALL SUBOPT_0x0
                 ; 0000 0044     putnum(min % 10);
0000c6 2da4      	MOV  R26,R4
0000c7 d0c7      	RCALL SUBOPT_0x1
                 ; 0000 0045     lcd_putchar(':');
                 ; 0000 0046     putnum(sec / 10);
0000c8 2da7      	MOV  R26,R7
0000c9 d0be      	RCALL SUBOPT_0x0
                 ; 0000 0047     putnum(sec % 10);
0000ca 2da7      	MOV  R26,R7
0000cb d0c3      	RCALL SUBOPT_0x1
                 ; 0000 0048     lcd_putchar(':');
                 ; 0000 0049     putnum(decsec);
0000cc 2da6      	MOV  R26,R6
0000cd 27bb      	CLR  R27
0000ce dfcb      	RCALL _putnum
                 ; 0000 004A 
                 ; 0000 004B }
0000cf 91e9      	LD   R30,Y+
0000d0 bfef      	OUT  SREG,R30
0000d1 91f9      	LD   R31,Y+
0000d2 91e9      	LD   R30,Y+
0000d3 91b9      	LD   R27,Y+
0000d4 91a9      	LD   R26,Y+
0000d5 9199      	LD   R25,Y+
0000d6 9189      	LD   R24,Y+
0000d7 9179      	LD   R23,Y+
0000d8 9169      	LD   R22,Y+
0000d9 90f9      	LD   R15,Y+
0000da 9019      	LD   R1,Y+
0000db 9009      	LD   R0,Y+
0000dc 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
000260           	.BYTE 0x6
                 ;
                 ;void main(void)
                 ; 0000 004E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 004F // Port C initialization
                 ; 0000 0050 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0051 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000dd efef      	LDI  R30,LOW(255)
0000de bbe4      	OUT  0x14,R30
                 ; 0000 0052 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0053 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000df e0e0      	LDI  R30,LOW(0)
0000e0 bbe5      	OUT  0x15,R30
                 ; 0000 0054 
                 ; 0000 0055 // Port D initialization
                 ; 0000 0056 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0057 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000e1 bbe1      	OUT  0x11,R30
                 ; 0000 0058 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0059 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000e2 bbe2      	OUT  0x12,R30
                 ; 0000 005A 
                 ; 0000 005B // Timer/Counter 1 initialization
                 ; 0000 005C // Clock source: System Clock
                 ; 0000 005D // Clock value: 1000.000 kHz
                 ; 0000 005E // Mode: Normal top=0xFFFF
                 ; 0000 005F // OC1A output: Disconnected
                 ; 0000 0060 // OC1B output: Disconnected
                 ; 0000 0061 // Noise Canceler: Off
                 ; 0000 0062 // Input Capture on Falling Edge
                 ; 0000 0063 // Timer Period: 50 ms
                 ; 0000 0064 // Timer1 Overflow Interrupt: On
                 ; 0000 0065 // Input Capture Interrupt: Off
                 ; 0000 0066 // Compare A Match Interrupt: Off
                 ; 0000 0067 // Compare B Match Interrupt: Off
                 ; 0000 0068 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000e3 bdef      	OUT  0x2F,R30
                 ; 0000 0069 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
0000e4 e0e2      	LDI  R30,LOW(2)
0000e5 bdee      	OUT  0x2E,R30
                 ; 0000 006A TCNT1H=0x3C;
0000e6 e3ec      	LDI  R30,LOW(60)
0000e7 bded      	OUT  0x2D,R30
                 ; 0000 006B TCNT1L=0xB0;
0000e8 ebe0      	LDI  R30,LOW(176)
0000e9 bdec      	OUT  0x2C,R30
                 ; 0000 006C ICR1H=0x00;
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bde7      	OUT  0x27,R30
                 ; 0000 006D ICR1L=0x00;
0000ec bde6      	OUT  0x26,R30
                 ; 0000 006E OCR1AH=0x00;
0000ed bdeb      	OUT  0x2B,R30
                 ; 0000 006F OCR1AL=0x00;
0000ee bdea      	OUT  0x2A,R30
                 ; 0000 0070 OCR1BH=0x00;
0000ef bde9      	OUT  0x29,R30
                 ; 0000 0071 OCR1BL=0x00;
0000f0 bde8      	OUT  0x28,R30
                 ; 0000 0072 
                 ; 0000 0073 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0074 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000f1 e0e4      	LDI  R30,LOW(4)
0000f2 bfe9      	OUT  0x39,R30
                 ; 0000 0075 
                 ; 0000 0076 // External Interrupt(s) initialization
                 ; 0000 0077 // INT0: On
                 ; 0000 0078 // INT0 Mode: Low level
                 ; 0000 0079 // INT1: On
                 ; 0000 007A // INT1 Mode: Low level
                 ; 0000 007B // INT2: Off
                 ; 0000 007C GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
0000f3 b7eb      	IN   R30,0x3B
0000f4 6ce0      	ORI  R30,LOW(0xC0)
0000f5 bfeb      	OUT  0x3B,R30
                 ; 0000 007D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 bfe5      	OUT  0x35,R30
                 ; 0000 007E MCUCSR=(0<<ISC2);
0000f8 bfe4      	OUT  0x34,R30
                 ; 0000 007F GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000f9 ece0      	LDI  R30,LOW(192)
0000fa bfea      	OUT  0x3A,R30
                 ; 0000 0080 
                 ; 0000 0081 // Alphanumeric LCD initialization
                 ; 0000 0082 // Connections are specified in the
                 ; 0000 0083 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0084 // RS - PORTC Bit 0
                 ; 0000 0085 // RD - PORTC Bit 1
                 ; 0000 0086 // EN - PORTC Bit 2
                 ; 0000 0087 // D4 - PORTC Bit 4
                 ; 0000 0088 // D5 - PORTC Bit 5
                 ; 0000 0089 // D6 - PORTC Bit 6
                 ; 0000 008A // D7 - PORTC Bit 7
                 ; 0000 008B // Characters/line: 16
                 ; 0000 008C lcd_init(16);
0000fb e1a0      	LDI  R26,LOW(16)
0000fc d060      	RCALL _lcd_init
                 ; 0000 008D 
                 ; 0000 008E // Global enable interrupts
                 ; 0000 008F #asm("sei")
0000fd 9478      	sei
                 ; 0000 0090 
                 ; 0000 0091 while (1)
                 _0xD:
                 ; 0000 0092       {
                 ; 0000 0093       ;
                 ; 0000 0094       }
0000fe cfff      	RJMP _0xD
                 ; 0000 0095 }
                 _0x10:
0000ff cfff      	RJMP _0x10
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000100 93aa      	ST   -Y,R26
000101 b3e5      	IN   R30,0x15
000102 70ef      	ANDI R30,LOW(0xF)
000103 2fae      	MOV  R26,R30
000104 81e8      	LD   R30,Y
000105 7fe0      	ANDI R30,LOW(0xF0)
000106 2bea      	OR   R30,R26
000107 bbe5      	OUT  0x15,R30
                +
000108 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000109 958a     +DEC R24
00010a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010b 9aaa      	SBI  0x15,2
                +
00010c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010f 98aa      	CBI  0x15,2
                +
000110 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000113 c072      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000114 93aa      	ST   -Y,R26
000115 81a8      	LD   R26,Y
000116 dfe9      	RCALL __lcd_write_nibble_G100
000117 81e8          ld    r30,y
000118 95e2          swap  r30
000119 83e8          st    y,r30
00011a 81a8      	LD   R26,Y
00011b dfe4      	RCALL __lcd_write_nibble_G100
                +
00011c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00011d 958a     +DEC R24
00011e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00011f c066      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000120 93aa      	ST   -Y,R26
000121 81e8      	LD   R30,Y
000122 e0f0      	LDI  R31,0
000123 59ea      	SUBI R30,LOW(-__base_y_G100)
000124 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000125 81e0      	LD   R30,Z
000126 81a9      	LDD  R26,Y+1
000127 0fae      	ADD  R26,R30
000128 dfeb      	RCALL __lcd_write_data
000129 8089      	LDD  R8,Y+1
00012a 80b8      	LDD  R11,Y+0
                 _0x2020002:
00012b 9622      	ADIW R28,2
00012c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00012d e0a2      	LDI  R26,LOW(2)
00012e d069      	RCALL SUBOPT_0x2
00012f e0ac      	LDI  R26,LOW(12)
000130 dfe3      	RCALL __lcd_write_data
000131 e0a1      	LDI  R26,LOW(1)
000132 d065      	RCALL SUBOPT_0x2
000133 e0e0      	LDI  R30,LOW(0)
000134 2ebe      	MOV  R11,R30
000135 2e8e      	MOV  R8,R30
000136 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000137 93aa      	ST   -Y,R26
000138 81a8      	LD   R26,Y
000139 30aa      	CPI  R26,LOW(0xA)
00013a f011      	BREQ _0x2000005
00013b 148a      	CP   R8,R10
00013c f048      	BRLO _0x2000004
                 _0x2000005:
00013d e0e0      	LDI  R30,LOW(0)
00013e 93ea      	ST   -Y,R30
00013f 94b3      	INC  R11
000140 2dab      	MOV  R26,R11
000141 dfde      	RCALL _lcd_gotoxy
000142 81a8      	LD   R26,Y
000143 30aa      	CPI  R26,LOW(0xA)
000144 f409      	BRNE _0x2000007
000145 c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000146 9483      	INC  R8
000147 9aa8      	SBI  0x15,0
000148 81a8      	LD   R26,Y
000149 dfca      	RCALL __lcd_write_data
00014a 98a8      	CBI  0x15,0
00014b c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00014c 93ba      	ST   -Y,R27
00014d 93aa      	ST   -Y,R26
00014e 931a      	ST   -Y,R17
                 _0x2000008:
00014f 81a9      	LDD  R26,Y+1
000150 81ba      	LDD  R27,Y+1+1
000151 91ed      	LD   R30,X+
000152 83a9      	STD  Y+1,R26
000153 83ba      	STD  Y+1+1,R27
000154 2f1e      	MOV  R17,R30
000155 30e0      	CPI  R30,0
000156 f019      	BREQ _0x200000A
000157 2fa1      	MOV  R26,R17
000158 dfde      	RCALL _lcd_putchar
000159 cff5      	RJMP _0x2000008
                 _0x200000A:
00015a 8118      	LDD  R17,Y+0
00015b 9623      	ADIW R28,3
00015c 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00015d 93aa      	ST   -Y,R26
00015e b3e4      	IN   R30,0x14
00015f 6fe0      	ORI  R30,LOW(0xF0)
000160 bbe4      	OUT  0x14,R30
000161 9aa2      	SBI  0x14,2
000162 9aa0      	SBI  0x14,0
000163 9aa1      	SBI  0x14,1
000164 98aa      	CBI  0x15,2
000165 98a8      	CBI  0x15,0
000166 98a9      	CBI  0x15,1
000167 80a8      	LDD  R10,Y+0
000168 81e8      	LD   R30,Y
000169 58e0      	SUBI R30,-LOW(128)
                +
00016a 93e0 0268+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00016c 81e8      	LD   R30,Y
00016d 54e0      	SUBI R30,-LOW(192)
                +
00016e 93e0 0269+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000170 e1a4      	LDI  R26,LOW(20)
000171 e0b0      	LDI  R27,0
000172 940e 01a4 	CALL _delay_ms
000174 d028      	RCALL SUBOPT_0x3
000175 d027      	RCALL SUBOPT_0x3
000176 d026      	RCALL SUBOPT_0x3
000177 e2a0      	LDI  R26,LOW(32)
000178 df87      	RCALL __lcd_write_nibble_G100
                +
000179 ec88     +LDI R24 , LOW ( 200 )
00017a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00017b 9701     +SBIW R24 , 1
00017c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00017d e2a8      	LDI  R26,LOW(40)
00017e df95      	RCALL __lcd_write_data
00017f e0a4      	LDI  R26,LOW(4)
000180 df93      	RCALL __lcd_write_data
000181 e8a5      	LDI  R26,LOW(133)
000182 df91      	RCALL __lcd_write_data
000183 e0a6      	LDI  R26,LOW(6)
000184 df8f      	RCALL __lcd_write_data
000185 dfa7      	RCALL _lcd_clear
                 _0x2020001:
000186 9621      	ADIW R28,1
000187 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000266           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
000188 e0b0      	LDI  R27,0
000189 e0ea      	LDI  R30,LOW(10)
00018a e0f0      	LDI  R31,HIGH(10)
00018b 940e 01c5 	CALL __DIVW21
00018d 01df      	MOVW R26,R30
00018e cf0b      	RJMP _putnum
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
00018f 27bb      	CLR  R27
000190 e0ea      	LDI  R30,LOW(10)
000191 e0f0      	LDI  R31,HIGH(10)
000192 940e 01ca 	CALL __MODW21
000194 01df      	MOVW R26,R30
000195 df04      	RCALL _putnum
000196 e3aa      	LDI  R26,LOW(58)
000197 cf9f      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000198 df7b      	RCALL __lcd_write_data
000199 e0a3      	LDI  R26,LOW(3)
00019a e0b0      	LDI  R27,0
00019b 940c 01a4 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
00019d e3a0      	LDI  R26,LOW(48)
00019e df61      	RCALL __lcd_write_nibble_G100
                +
00019f ec88     +LDI R24 , LOW ( 200 )
0001a0 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a1 9701     +SBIW R24 , 1
0001a2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a3 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001a4 9610      	adiw r26,0
0001a5 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001a6 ed80     +LDI R24 , LOW ( 0x7D0 )
0001a7 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001a8 9701     +SBIW R24 , 1
0001a9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001aa 95a8      	wdr
0001ab 9711      	sbiw r26,1
0001ac f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ad 9508      	ret
                 
                 __ANEGW1:
0001ae 95f1      	NEG  R31
0001af 95e1      	NEG  R30
0001b0 40f0      	SBCI R31,0
0001b1 9508      	RET
                 
                 __DIVW21U:
0001b2 2400      	CLR  R0
0001b3 2411      	CLR  R1
0001b4 e190      	LDI  R25,16
                 __DIVW21U1:
0001b5 0faa      	LSL  R26
0001b6 1fbb      	ROL  R27
0001b7 1c00      	ROL  R0
0001b8 1c11      	ROL  R1
0001b9 1a0e      	SUB  R0,R30
0001ba 0a1f      	SBC  R1,R31
0001bb f418      	BRCC __DIVW21U2
0001bc 0e0e      	ADD  R0,R30
0001bd 1e1f      	ADC  R1,R31
0001be c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001bf 60a1      	SBR  R26,1
                 __DIVW21U3:
0001c0 959a      	DEC  R25
0001c1 f799      	BRNE __DIVW21U1
0001c2 01fd      	MOVW R30,R26
0001c3 01d0      	MOVW R26,R0
0001c4 9508      	RET
                 
                 __DIVW21:
0001c5 d012      	RCALL __CHKSIGNW
0001c6 dfeb      	RCALL __DIVW21U
0001c7 f40e      	BRTC __DIVW211
0001c8 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001c9 9508      	RET
                 
                 __MODW21:
0001ca 94e8      	CLT
0001cb ffb7      	SBRS R27,7
0001cc c004      	RJMP __MODW211
0001cd 95a0      	COM  R26
0001ce 95b0      	COM  R27
0001cf 9611      	ADIW R26,1
0001d0 9468      	SET
                 __MODW211:
0001d1 fdf7      	SBRC R31,7
0001d2 dfdb      	RCALL __ANEGW1
0001d3 dfde      	RCALL __DIVW21U
0001d4 01fd      	MOVW R30,R26
0001d5 f40e      	BRTC __MODW212
0001d6 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001d7 9508      	RET
                 
                 __CHKSIGNW:
0001d8 94e8      	CLT
0001d9 fff7      	SBRS R31,7
0001da c002      	RJMP __CHKSW1
0001db dfd2      	RCALL __ANEGW1
0001dc 9468      	SET
                 __CHKSW1:
0001dd ffb7      	SBRS R27,7
0001de c006      	RJMP __CHKSW2
0001df 95a0      	COM  R26
0001e0 95b0      	COM  R27
0001e1 9611      	ADIW R26,1
0001e2 f800      	BLD  R0,0
0001e3 9403      	INC  R0
0001e4 fa00      	BST  R0,0
                 __CHKSW2:
0001e5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   0 r4 :   7 r5 :   6 r6 :   8 r7 :   8 
r8 :   4 r9 :   3 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   9 r26:  65 r27:  19 r28:   4 r29:   1 r30: 119 r31:  15 
x  :   4 y  :  64 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   6 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   4 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   3 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   5 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   7 jmp   :  23 ld    :  28 ldd   :   7 ldi   :  68 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  14 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   2 out   :  32 pop   :   0 push  :   0 rcall :  42 ret   :  12 
reti  :   3 rjmp  :  19 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   2 sts   :   2 sub   :   2 subi  :   4 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003cc    938     34    972   32768   3.0%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
