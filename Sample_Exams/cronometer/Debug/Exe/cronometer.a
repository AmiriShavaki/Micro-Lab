;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;unsigned char hr = 0, min = 0, sec = 0, decsec = 0, running = 0;
;
;void tick() {
; 0000 0008 void tick() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009     if (decsec < 9) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000A         decsec++;
;PCODE: $00000012 VOL: 0
; 0000 000B     } else if (sec < 59) {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000C         decsec = 0;
;PCODE: $00000018 VOL: 0
; 0000 000D         sec++;
;PCODE: $00000019 VOL: 0
; 0000 000E     } else if (min < 59) {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 000F         decsec = 0;
;PCODE: $0000001F VOL: 0
; 0000 0010         sec = 0;
;PCODE: $00000020 VOL: 0
; 0000 0011         min++;
;PCODE: $00000021 VOL: 0
; 0000 0012     } else if (hr < 23) {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0013         decsec = 0;
;PCODE: $00000027 VOL: 0
; 0000 0014         sec = 0;
;PCODE: $00000028 VOL: 0
; 0000 0015         min = 0;
;PCODE: $00000029 VOL: 0
; 0000 0016         hr++;
;PCODE: $0000002A VOL: 0
; 0000 0017     } else {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0018         decsec = 0;
;PCODE: $0000002D VOL: 0
; 0000 0019         sec = 0;
;PCODE: $0000002E VOL: 0
; 0000 001A         min = 0;
;PCODE: $0000002F VOL: 0
; 0000 001B         hr = 0;
;PCODE: $00000030 VOL: 0
; 0000 001C     }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 001D }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0021 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022 running = 1 - running;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0023 }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0027 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0028         decsec = 0;
;PCODE: $00000041 VOL: 0
; 0000 0029         sec = 0;
;PCODE: $00000042 VOL: 0
; 0000 002A         min = 0;
;PCODE: $00000043 VOL: 0
; 0000 002B         hr = 0;
;PCODE: $00000044 VOL: 0
; 0000 002C }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;void putnum(int n) {
; 0000 002E void putnum(int n) {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 002F     lcd_putchar('0' + n);
;PCODE: $0000004A VOL: 0
;	n -> Y+0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0030 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0034 {
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0035 // Reinitialize Timer1 value
; 0000 0036 TCNT1H=0x3CB0 >> 8;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0037 TCNT1L=0x3CB0 & 0xff;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0038 
; 0000 0039 if (running) {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 003A     tick();
;PCODE: $00000059 VOL: 0
; 0000 003B }
; 0000 003C     lcd_clear();
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003D     lcd_gotoxy(6, 0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003E     lcd_puts("Timer");
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003F     lcd_gotoxy(3, 1);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0040     putnum(hr / 10);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0041     putnum(hr % 10);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0042     lcd_putchar(':');
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0043     putnum(min / 10);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0044     putnum(min % 10);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0045     lcd_putchar(':');
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0046     putnum(sec / 10);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0047     putnum(sec % 10);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0048     lcd_putchar(':');
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0049     putnum(decsec);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 004A 
; 0000 004B }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0

	.DSEG
_0xC:
	.BYTE 0x6
;
;void main(void)
; 0000 004E {

	.CSEG
;PCODE: $00000097 VOL: 0
; 0000 004F // Port C initialization
; 0000 0050 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0051 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0052 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0053 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0054 
; 0000 0055 // Port D initialization
; 0000 0056 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0057 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0058 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0059 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 005A 
; 0000 005B // Timer/Counter 1 initialization
; 0000 005C // Clock source: System Clock
; 0000 005D // Clock value: 1000.000 kHz
; 0000 005E // Mode: Normal top=0xFFFF
; 0000 005F // OC1A output: Disconnected
; 0000 0060 // OC1B output: Disconnected
; 0000 0061 // Noise Canceler: Off
; 0000 0062 // Input Capture on Falling Edge
; 0000 0063 // Timer Period: 50 ms
; 0000 0064 // Timer1 Overflow Interrupt: On
; 0000 0065 // Input Capture Interrupt: Off
; 0000 0066 // Compare A Match Interrupt: Off
; 0000 0067 // Compare B Match Interrupt: Off
; 0000 0068 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0069 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 006A TCNT1H=0x3C;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006B TCNT1L=0xB0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 006C ICR1H=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006D ICR1L=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006E OCR1AH=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 006F OCR1AL=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0070 OCR1BH=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0071 OCR1BL=0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0072 
; 0000 0073 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0074 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0075 
; 0000 0076 // External Interrupt(s) initialization
; 0000 0077 // INT0: On
; 0000 0078 // INT0 Mode: Low level
; 0000 0079 // INT1: On
; 0000 007A // INT1 Mode: Low level
; 0000 007B // INT2: Off
; 0000 007C GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 007E MCUCSR=(0<<ISC2);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 007F GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0080 
; 0000 0081 // Alphanumeric LCD initialization
; 0000 0082 // Connections are specified in the
; 0000 0083 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0084 // RS - PORTC Bit 0
; 0000 0085 // RD - PORTC Bit 1
; 0000 0086 // EN - PORTC Bit 2
; 0000 0087 // D4 - PORTC Bit 4
; 0000 0088 // D5 - PORTC Bit 5
; 0000 0089 // D6 - PORTC Bit 6
; 0000 008A // D7 - PORTC Bit 7
; 0000 008B // Characters/line: 16
; 0000 008C lcd_init(16);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 008D 
; 0000 008E // Global enable interrupts
; 0000 008F #asm("sei")
;PCODE: $000000C1 VOL: 0
	sei
;PCODE: $000000C2 VOL: 0
; 0000 0090 
; 0000 0091 while (1)
;PCODE: $000000C3 VOL: 0
; 0000 0092       {
; 0000 0093       ;
; 0000 0094       }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0095 }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
