
AVRASM ver. 2.1.30  C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm Sun Jun 05 20:55:17 2022

C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Amiri\Documents\semester6\Micro Lab\last years exams\Mahdi\segments\Debug\List\segments.asm(1095): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _lnum=R4
                 	.DEF _lnum_msb=R5
                 	.DEF _rnum=R6
                 	.DEF _rnum_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _change_left=R10
                 	.DEF _change_left_msb=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 007d 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0067 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _bcdequ:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f
00002f 7c77
000030 5e39
000031 7179      	.DB  0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000032 0000
000033 0000      	.DB  0x0,0x0,0x0,0x0
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000036 0008      	.DW  0x08
000037 0004      	.DW  0x04
000038 0064      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000039 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003a 94f8      	CLI
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004d e6ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004f 9185      	LPM  R24,Z+
000050 9195      	LPM  R25,Z+
000051 9700      	SBIW R24,0
000052 f061      	BREQ __GLOBAL_INI_END
000053 91a5      	LPM  R26,Z+
000054 91b5      	LPM  R27,Z+
000055 9005      	LPM  R0,Z+
000056 9015      	LPM  R1,Z+
000057 01bf      	MOVW R22,R30
000058 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000059 9005      	LPM  R0,Z+
00005a 920d      	ST   X+,R0
00005b 9701      	SBIW R24,1
00005c f7e1      	BRNE __GLOBAL_INI_LOOP
00005d 01fb      	MOVW R30,R22
00005e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000060 bfed      	OUT  SPL,R30
000061 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000062 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000063 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000064 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000065 940c 009b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;int lnum = 0, rnum = 0, i = 0, change_left = 0;
                 ;
                 ;const char bcdequ[] = { 0x3F, 0x06, 0x5B, 0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F, 0x77,0x7C, 0x39 , 0x5E, 0x79, 0x71 }  ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0009 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000067 93aa      	ST   -Y,R26
000068 93ba      	ST   -Y,R27
000069 93ea      	ST   -Y,R30
00006a 93fa      	ST   -Y,R31
00006b b7ef      	IN   R30,SREG
00006c 93ea      	ST   -Y,R30
                 ; 0000 000A // Reinitialize Timer 0 value
                 ; 0000 000B TCNT0=0x93;
00006d e9e3      	LDI  R30,LOW(147)
00006e bfe2      	OUT  0x32,R30
                 ; 0000 000C i = (i + 1) % 8;
00006f 01f4      	MOVW R30,R8
000070 9631      	ADIW R30,1
000071 e0a7      	LDI  R26,LOW(7)
000072 e0b0      	LDI  R27,HIGH(7)
000073 940e 0168 	CALL __MANDW12
000075 014f      	MOVW R8,R30
                 ; 0000 000D }
000076 91e9      	LD   R30,Y+
000077 bfef      	OUT  SREG,R30
000078 91f9      	LD   R31,Y+
000079 91e9      	LD   R30,Y+
00007a 91b9      	LD   R27,Y+
00007b 91a9      	LD   R26,Y+
00007c 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0011 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00007d 93ea      	ST   -Y,R30
00007e 93fa      	ST   -Y,R31
00007f b7ef      	IN   R30,SREG
000080 93ea      	ST   -Y,R30
                 ; 0000 0012 // Reinitialize Timer1 value
                 ; 0000 0013 TCNT1H=0x85EE >> 8;
000081 e8e5      	LDI  R30,LOW(133)
000082 bded      	OUT  0x2D,R30
                 ; 0000 0014 TCNT1L=0x85EE & 0xff;
000083 eeee      	LDI  R30,LOW(238)
000084 bdec      	OUT  0x2C,R30
                 ; 0000 0015 
                 ; 0000 0016 rnum++;
000085 01f3      	MOVW R30,R6
000086 9631      	ADIW R30,1
000087 013f      	MOVW R6,R30
                 ; 0000 0017 
                 ; 0000 0018 if (change_left == 1) {
000088 e0e1      	LDI  R30,LOW(1)
000089 e0f0      	LDI  R31,HIGH(1)
00008a 15ea      	CP   R30,R10
00008b 05fb      	CPC  R31,R11
00008c f431      	BRNE _0x3
                 ; 0000 0019     lnum--;
00008d 01f2      	MOVW R30,R4
00008e 9731      	SBIW R30,1
00008f 012f      	MOVW R4,R30
                 ; 0000 001A     change_left = 0;
000090 24aa      	CLR  R10
000091 24bb      	CLR  R11
                 ; 0000 001B } else {
000092 c003      	RJMP _0x4
                 _0x3:
                 ; 0000 001C     change_left = 1;
000093 e0e1      	LDI  R30,LOW(1)
000094 e0f0      	LDI  R31,HIGH(1)
000095 015f      	MOVW R10,R30
                 ; 0000 001D }
                 _0x4:
                 ; 0000 001E 
                 ; 0000 001F }
000096 91e9      	LD   R30,Y+
000097 bfef      	OUT  SREG,R30
000098 91f9      	LD   R31,Y+
000099 91e9      	LD   R30,Y+
00009a 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0022 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0023 // Declare your local variables here
                 ; 0000 0024 
                 ; 0000 0025 // Input/Output Ports initialization
                 ; 0000 0026 // Port B initialization
                 ; 0000 0027 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0028 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00009b efef      	LDI  R30,LOW(255)
00009c bbe7      	OUT  0x17,R30
                 ; 0000 0029 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 002A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00009d e0e0      	LDI  R30,LOW(0)
00009e bbe8      	OUT  0x18,R30
                 ; 0000 002B 
                 ; 0000 002C // Port C initialization
                 ; 0000 002D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002E DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00009f efef      	LDI  R30,LOW(255)
0000a0 bbe4      	OUT  0x14,R30
                 ; 0000 002F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0030 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bbe5      	OUT  0x15,R30
                 ; 0000 0031 
                 ; 0000 0032 // Timer/Counter 0 initialization
                 ; 0000 0033 // Clock source: System Clock
                 ; 0000 0034 // Clock value: 31.250 kHz
                 ; 0000 0035 // Mode: Normal top=0xFF
                 ; 0000 0036 // OC0 output: Disconnected
                 ; 0000 0037 // Timer Period: 3.488 ms
                 ; 0000 0038 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
0000a3 e0e4      	LDI  R30,LOW(4)
0000a4 bfe3      	OUT  0x33,R30
                 ; 0000 0039 TCNT0=0x93;
0000a5 e9e3      	LDI  R30,LOW(147)
0000a6 bfe2      	OUT  0x32,R30
                 ; 0000 003A OCR0=0x00;
0000a7 e0e0      	LDI  R30,LOW(0)
0000a8 bfec      	OUT  0x3C,R30
                 ; 0000 003B 
                 ; 0000 003C // Timer/Counter 1 initialization
                 ; 0000 003D // Clock source: System Clock
                 ; 0000 003E // Clock value: 125.000 kHz
                 ; 0000 003F // Mode: Normal top=0xFFFF
                 ; 0000 0040 // OC1A output: Disconnected
                 ; 0000 0041 // OC1B output: Disconnected
                 ; 0000 0042 // Noise Canceler: Off
                 ; 0000 0043 // Input Capture on Falling Edge
                 ; 0000 0044 // Timer Period: 0.5 s
                 ; 0000 0045 // Timer1 Overflow Interrupt: On
                 ; 0000 0046 // Input Capture Interrupt: Off
                 ; 0000 0047 // Compare A Match Interrupt: Off
                 ; 0000 0048 // Compare B Match Interrupt: Off
                 ; 0000 0049 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a9 bdef      	OUT  0x2F,R30
                 ; 0000 004A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
0000aa e0e3      	LDI  R30,LOW(3)
0000ab bdee      	OUT  0x2E,R30
                 ; 0000 004B TCNT1H=0x0B;
0000ac e0eb      	LDI  R30,LOW(11)
0000ad bded      	OUT  0x2D,R30
                 ; 0000 004C TCNT1L=0xDC;
0000ae edec      	LDI  R30,LOW(220)
0000af bdec      	OUT  0x2C,R30
                 ; 0000 004D ICR1H=0x00;
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 bde7      	OUT  0x27,R30
                 ; 0000 004E ICR1L=0x00;
0000b2 bde6      	OUT  0x26,R30
                 ; 0000 004F OCR1AH=0x00;
0000b3 bdeb      	OUT  0x2B,R30
                 ; 0000 0050 OCR1AL=0x00;
0000b4 bdea      	OUT  0x2A,R30
                 ; 0000 0051 OCR1BH=0x00;
0000b5 bde9      	OUT  0x29,R30
                 ; 0000 0052 OCR1BL=0x00;
0000b6 bde8      	OUT  0x28,R30
                 ; 0000 0053 
                 ; 0000 0054 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0055 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000b7 e0e5      	LDI  R30,LOW(5)
0000b8 bfe9      	OUT  0x39,R30
                 ; 0000 0056 
                 ; 0000 0057 // Global enable interrupts
                 ; 0000 0058 #asm("sei")
0000b9 9478      	sei
                 ; 0000 0059 
                 ; 0000 005A while (1)
                 _0x5:
                 ; 0000 005B       {
                 ; 0000 005C if (lnum < 0) {
0000ba 2400      	CLR  R0
0000bb 1440      	CP   R4,R0
0000bc 0450      	CPC  R5,R0
0000bd f41c      	BRGE _0x8
                 ; 0000 005D     lnum = 9999;
0000be e0ef      	LDI  R30,LOW(9999)
0000bf e2f7      	LDI  R31,HIGH(9999)
0000c0 012f      	MOVW R4,R30
                 ; 0000 005E }
                 ; 0000 005F if (rnum > 9999) {
                 _0x8:
0000c1 e0ef      	LDI  R30,LOW(9999)
0000c2 e2f7      	LDI  R31,HIGH(9999)
0000c3 15e6      	CP   R30,R6
0000c4 05f7      	CPC  R31,R7
0000c5 f414      	BRGE _0x9
                 ; 0000 0060     rnum = 0;
0000c6 2466      	CLR  R6
0000c7 2477      	CLR  R7
                 ; 0000 0061 }
                 ; 0000 0062 
                 ; 0000 0063 
                 ; 0000 0064     if (i == 0) {
                 _0x9:
0000c8 2c08      	MOV  R0,R8
0000c9 2809      	OR   R0,R9
0000ca f421      	BRNE _0xA
                 ; 0000 0065         PORTB = 0b11111110;
0000cb efee      	LDI  R30,LOW(254)
0000cc bbe8      	OUT  0x18,R30
                 ; 0000 0066         PORTC = bcdequ[lnum / 1000];
0000cd 01d2      	MOVW R26,R4
0000ce d041      	RCALL SUBOPT_0x0
                 ; 0000 0067     }
                 ; 0000 0068     if (i == 1) {
                 _0xA:
0000cf e0e1      	LDI  R30,LOW(1)
0000d0 e0f0      	LDI  R31,HIGH(1)
0000d1 15e8      	CP   R30,R8
0000d2 05f9      	CPC  R31,R9
0000d3 f421      	BRNE _0xB
                 ; 0000 0069         PORTB = 0b11111101;
0000d4 efed      	LDI  R30,LOW(253)
0000d5 bbe8      	OUT  0x18,R30
                 ; 0000 006A         PORTC = bcdequ[(lnum / 100) % 10];
0000d6 01d2      	MOVW R26,R4
0000d7 d041      	RCALL SUBOPT_0x1
                 ; 0000 006B     }
                 ; 0000 006C     if (i == 2) {
                 _0xB:
0000d8 e0e2      	LDI  R30,LOW(2)
0000d9 e0f0      	LDI  R31,HIGH(2)
0000da 15e8      	CP   R30,R8
0000db 05f9      	CPC  R31,R9
0000dc f421      	BRNE _0xC
                 ; 0000 006D         PORTB = 0b11111011;
0000dd efeb      	LDI  R30,LOW(251)
0000de bbe8      	OUT  0x18,R30
                 ; 0000 006E         PORTC = bcdequ[(lnum / 10) % 10];
0000df 01d2      	MOVW R26,R4
0000e0 d046      	RCALL SUBOPT_0x2
                 ; 0000 006F     }
                 ; 0000 0070     if (i == 3) {
                 _0xC:
0000e1 e0e3      	LDI  R30,LOW(3)
0000e2 e0f0      	LDI  R31,HIGH(3)
0000e3 15e8      	CP   R30,R8
0000e4 05f9      	CPC  R31,R9
0000e5 f421      	BRNE _0xD
                 ; 0000 0071         PORTB = 0b11110111;
0000e6 efe7      	LDI  R30,LOW(247)
0000e7 bbe8      	OUT  0x18,R30
                 ; 0000 0072         PORTC = bcdequ[lnum % 10];
0000e8 01d2      	MOVW R26,R4
0000e9 d04b      	RCALL SUBOPT_0x3
                 ; 0000 0073     }
                 ; 0000 0074     if (i == 4) {
                 _0xD:
0000ea e0e4      	LDI  R30,LOW(4)
0000eb e0f0      	LDI  R31,HIGH(4)
0000ec 15e8      	CP   R30,R8
0000ed 05f9      	CPC  R31,R9
0000ee f421      	BRNE _0xE
                 ; 0000 0075         PORTB = 0b11101111;
0000ef eeef      	LDI  R30,LOW(239)
0000f0 bbe8      	OUT  0x18,R30
                 ; 0000 0076         PORTC = bcdequ[rnum / 1000];
0000f1 01d3      	MOVW R26,R6
0000f2 d01d      	RCALL SUBOPT_0x0
                 ; 0000 0077     }
                 ; 0000 0078     if (i == 5){
                 _0xE:
0000f3 e0e5      	LDI  R30,LOW(5)
0000f4 e0f0      	LDI  R31,HIGH(5)
0000f5 15e8      	CP   R30,R8
0000f6 05f9      	CPC  R31,R9
0000f7 f421      	BRNE _0xF
                 ; 0000 0079         PORTB = 0b11011111;
0000f8 edef      	LDI  R30,LOW(223)
0000f9 bbe8      	OUT  0x18,R30
                 ; 0000 007A         PORTC = bcdequ[(rnum / 100) % 10];
0000fa 01d3      	MOVW R26,R6
0000fb d01d      	RCALL SUBOPT_0x1
                 ; 0000 007B     }
                 ; 0000 007C     if (i == 6) {
                 _0xF:
0000fc e0e6      	LDI  R30,LOW(6)
0000fd e0f0      	LDI  R31,HIGH(6)
0000fe 15e8      	CP   R30,R8
0000ff 05f9      	CPC  R31,R9
000100 f421      	BRNE _0x10
                 ; 0000 007D         PORTB = 0b10111111;
000101 ebef      	LDI  R30,LOW(191)
000102 bbe8      	OUT  0x18,R30
                 ; 0000 007E         PORTC = bcdequ[(rnum / 10) % 10];
000103 01d3      	MOVW R26,R6
000104 d022      	RCALL SUBOPT_0x2
                 ; 0000 007F     }
                 ; 0000 0080     if (i == 7) {
                 _0x10:
000105 e0e7      	LDI  R30,LOW(7)
000106 e0f0      	LDI  R31,HIGH(7)
000107 15e8      	CP   R30,R8
000108 05f9      	CPC  R31,R9
000109 f421      	BRNE _0x11
                 ; 0000 0081         PORTB = 0b01111111;
00010a e7ef      	LDI  R30,LOW(127)
00010b bbe8      	OUT  0x18,R30
                 ; 0000 0082         PORTC = bcdequ[rnum % 10];
00010c 01d3      	MOVW R26,R6
00010d d027      	RCALL SUBOPT_0x3
                 ; 0000 0083     }
                 ; 0000 0084 
                 ; 0000 0085       }
                 _0x11:
00010e cfab      	RJMP _0x5
                 ; 0000 0086 }
                 _0x12:
00010f cfff      	RJMP _0x12
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000110 eee8      	LDI  R30,LOW(1000)
000111 e0f3      	LDI  R31,HIGH(1000)
000112 940e 0155 	CALL __DIVW21
000114 5aec      	SUBI R30,LOW(-_bcdequ*2)
000115 4fff      	SBCI R31,HIGH(-_bcdequ*2)
000116 9004      	LPM  R0,Z
000117 ba05      	OUT  0x15,R0
000118 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
000119 e6e4      	LDI  R30,LOW(100)
00011a e0f0      	LDI  R31,HIGH(100)
00011b 940e 0155 	CALL __DIVW21
00011d 01df      	MOVW R26,R30
00011e e0ea      	LDI  R30,LOW(10)
00011f e0f0      	LDI  R31,HIGH(10)
000120 940e 015a 	CALL __MODW21
000122 5aec      	SUBI R30,LOW(-_bcdequ*2)
000123 4fff      	SBCI R31,HIGH(-_bcdequ*2)
000124 9004      	LPM  R0,Z
000125 ba05      	OUT  0x15,R0
000126 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000127 e0ea      	LDI  R30,LOW(10)
000128 e0f0      	LDI  R31,HIGH(10)
000129 940e 0155 	CALL __DIVW21
00012b 01df      	MOVW R26,R30
00012c e0ea      	LDI  R30,LOW(10)
00012d e0f0      	LDI  R31,HIGH(10)
00012e 940e 015a 	CALL __MODW21
000130 5aec      	SUBI R30,LOW(-_bcdequ*2)
000131 4fff      	SBCI R31,HIGH(-_bcdequ*2)
000132 9004      	LPM  R0,Z
000133 ba05      	OUT  0x15,R0
000134 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000135 e0ea      	LDI  R30,LOW(10)
000136 e0f0      	LDI  R31,HIGH(10)
000137 940e 015a 	CALL __MODW21
000139 5aec      	SUBI R30,LOW(-_bcdequ*2)
00013a 4fff      	SBCI R31,HIGH(-_bcdequ*2)
00013b 9004      	LPM  R0,Z
00013c ba05      	OUT  0x15,R0
00013d 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
00013e 95f1      	NEG  R31
00013f 95e1      	NEG  R30
000140 40f0      	SBCI R31,0
000141 9508      	RET
                 
                 __DIVW21U:
000142 2400      	CLR  R0
000143 2411      	CLR  R1
000144 e190      	LDI  R25,16
                 __DIVW21U1:
000145 0faa      	LSL  R26
000146 1fbb      	ROL  R27
000147 1c00      	ROL  R0
000148 1c11      	ROL  R1
000149 1a0e      	SUB  R0,R30
00014a 0a1f      	SBC  R1,R31
00014b f418      	BRCC __DIVW21U2
00014c 0e0e      	ADD  R0,R30
00014d 1e1f      	ADC  R1,R31
00014e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00014f 60a1      	SBR  R26,1
                 __DIVW21U3:
000150 959a      	DEC  R25
000151 f799      	BRNE __DIVW21U1
000152 01fd      	MOVW R30,R26
000153 01d0      	MOVW R26,R0
000154 9508      	RET
                 
                 __DIVW21:
000155 d01c      	RCALL __CHKSIGNW
000156 dfeb      	RCALL __DIVW21U
000157 f40e      	BRTC __DIVW211
000158 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000159 9508      	RET
                 
                 __MODW21:
00015a 94e8      	CLT
00015b ffb7      	SBRS R27,7
00015c c004      	RJMP __MODW211
00015d 95a0      	COM  R26
00015e 95b0      	COM  R27
00015f 9611      	ADIW R26,1
000160 9468      	SET
                 __MODW211:
000161 fdf7      	SBRC R31,7
000162 dfdb      	RCALL __ANEGW1
000163 dfde      	RCALL __DIVW21U
000164 01fd      	MOVW R30,R26
000165 f40e      	BRTC __MODW212
000166 dfd7      	RCALL __ANEGW1
                 __MODW212:
000167 9508      	RET
                 
                 __MANDW12:
000168 94e8      	CLT
000169 fff7      	SBRS R31,7
00016a c002      	RJMP __MANDW121
00016b dfd2      	RCALL __ANEGW1
00016c 9468      	SET
                 __MANDW121:
00016d 23ea      	AND  R30,R26
00016e 23fb      	AND  R31,R27
00016f f40e      	BRTC __MANDW122
000170 dfcd      	RCALL __ANEGW1
                 __MANDW122:
000171 9508      	RET
                 
                 __CHKSIGNW:
000172 94e8      	CLT
000173 fff7      	SBRS R31,7
000174 c002      	RJMP __CHKSW1
000175 dfc8      	RCALL __ANEGW1
000176 9468      	SET
                 __CHKSW1:
000177 ffb7      	SBRS R27,7
000178 c006      	RJMP __CHKSW2
000179 95a0      	COM  R26
00017a 95b0      	COM  R27
00017b 9611      	ADIW R26,1
00017c f800      	BLD  R0,0
00017d 9403      	INC  R0
00017e fa00      	BST  R0,0
                 __CHKSW2:
00017f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  25 r1 :   5 r2 :   0 r3 :   0 r4 :   8 r5 :   1 r6 :   8 r7 :   2 
r8 :  10 r9 :   8 r10:   3 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   7 r25:   4 r26:  26 r27:  11 r28:   1 r29:   1 r30: 127 r31:  45 
x  :   3 y  :  16 z  :  11 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   4 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   7 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :  10 cpc   :  10 cpi   :   0 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  22 ld    :   8 ldd   :   0 ldi   :  72 
lds   :   0 lpm   :  15 lsl   :   1 lsr   :   0 mov   :   1 movw  :  24 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   0 out   :  41 pop   :   0 push  :   0 rcall :  17 ret   :  10 
reti  :   2 rjmp  :   9 rol   :   3 ror   :   0 sbc   :   1 sbci  :   5 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  11 std   :   0 sts   :   0 sub   :   1 subi  :   4 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 47 out of 116 (40.5%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000300    736     32    768   32768   2.3%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
