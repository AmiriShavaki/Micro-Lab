;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/27/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#include <delay.h>
;
;int stx = 5, sty = 0;
;
;const char name[] = "Mahdi Amiri";
;
;void disp(int x, int y) {
; 0000 0023 void disp(int x, int y) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024     int i = 0;
; 0000 0025     lcd_clear();
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	x -> Y+4
;	y -> Y+2
;	i -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0026     while (name[i]) {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0027         lcd_gotoxy(x, y);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0028         lcd_putchar(name[i++]);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0029         if (x < 15) {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002A             x++;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002B         } else {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002C             x = 0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002D             y = 1 - y;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 002E         }
;PCODE: $00000033 VOL: 0
; 0000 002F     }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0030 }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0034 {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0035 // Reinitialize Timer1 value
; 0000 0036 TCNT1H=0x85EE >> 8;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0037 TCNT1L=0x85EE & 0xff;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0038 
; 0000 0039 if (stx > 0) {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003A     stx--;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003B } else {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003C     stx = 15;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003D     sty = 1 - sty;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003E }
;PCODE: $0000004F VOL: 0
; 0000 003F 
; 0000 0040 disp(stx, sty);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0041 
; 0000 0042 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;void main(void)
; 0000 0045 {
;PCODE: $00000056 VOL: 0
; 0000 0046 // Declare your local variables here
; 0000 0047 
; 0000 0048 // Input/Output Ports initialization
; 0000 0049 // Port A initialization
; 0000 004A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 004C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 004E 
; 0000 004F // Port B initialization
; 0000 0050 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0051 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0052 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0053 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0054 
; 0000 0055 // Port C initialization
; 0000 0056 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0057 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0058 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0059 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005A 
; 0000 005B // Port D initialization
; 0000 005C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0060 
; 0000 0061 // Timer/Counter 1 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: 31.250 kHz
; 0000 0064 // Mode: Normal top=0xFFFF
; 0000 0065 // OC1A output: Disconnected
; 0000 0066 // OC1B output: Disconnected
; 0000 0067 // Noise Canceler: Off
; 0000 0068 // Input Capture on Falling Edge
; 0000 0069 // Timer Period: 1 s
; 0000 006A // Timer1 Overflow Interrupt: On
; 0000 006B // Input Capture Interrupt: Off
; 0000 006C // Compare A Match Interrupt: Off
; 0000 006D // Compare B Match Interrupt: Off
; 0000 006E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 006F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0070 TCNT1H=0x85;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0071 TCNT1L=0xEE;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0072 ICR1H=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0073 ICR1L=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0074 OCR1AH=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0075 OCR1AL=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0076 OCR1BH=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0077 OCR1BL=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0078 
; 0000 0079 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 007B 
; 0000 007C // Alphanumeric LCD initialization
; 0000 007D // Connections are specified in the
; 0000 007E // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 007F // RS - PORTC Bit 0
; 0000 0080 // RD - PORTC Bit 1
; 0000 0081 // EN - PORTC Bit 2
; 0000 0082 // D4 - PORTC Bit 4
; 0000 0083 // D5 - PORTC Bit 5
; 0000 0084 // D6 - PORTC Bit 6
; 0000 0085 // D7 - PORTC Bit 7
; 0000 0086 // Characters/line: 16
; 0000 0087 lcd_init(16);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0088 
; 0000 0089 // Global enable interrupts
; 0000 008A #asm("sei")
;PCODE: $0000007F VOL: 0
	sei
;PCODE: $00000080 VOL: 0
; 0000 008B 
; 0000 008C while (1)
;PCODE: $00000081 VOL: 0
; 0000 008D       {
; 0000 008E 
; 0000 008F       delay_ms(1);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0090 
; 0000 0091       }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0092 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
