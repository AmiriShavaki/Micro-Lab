;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <stdlib.h>
;
;const char hex[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E unsigned int new_val = PINC.0 * 1 + PINC.1 * 2 + PINC.2 * 4 + PINC.3 * 8 + PINC.4 * 16 + PINC.5 * 32 + PINC.6 * 64 + PIN ...
; 0000 000F 
; 0000 0010 // Reinitialize Timer1 value
; 0000 0011 TCNT1H=0xBDC >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	new_val -> R16,R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0012 TCNT1L=0xBDC & 0xff;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0013 
; 0000 0014 putchar(hex[new_val / 16]);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0015 putchar(hex[new_val % 16]);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0016 putchar('\r');
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0017 putchar('\n');
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0018 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;void main(void)
; 0000 001B {
;PCODE: $00000057 VOL: 0
; 0000 001C char msg[] = "In the Name of God\r\n";
; 0000 001D 
; 0000 001E // Port C initialization
; 0000 001F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0020 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;	msg -> Y+0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0021 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0022 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0023 
; 0000 0024 // USART initialization
; 0000 0025 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0026 // USART Receiver: On
; 0000 0027 // USART Transmitter: On
; 0000 0028 // USART Mode: Asynchronous
; 0000 0029 // USART Baud Rate: 9600
; 0000 002A UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 002B UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 002C UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 002D UBRRH=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 002E UBRRL=0x33;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 002F 
; 0000 0030 // Timer/Counter 1 initialization
; 0000 0031 // Clock source: System Clock
; 0000 0032 // Clock value: 31.250 kHz
; 0000 0033 // Mode: Normal top=0xFFFF
; 0000 0034 // OC1A output: Disconnected
; 0000 0035 // OC1B output: Disconnected
; 0000 0036 // Noise Canceler: Off
; 0000 0037 // Input Capture on Falling Edge
; 0000 0038 // Timer Period: 1 s
; 0000 0039 // Timer1 Overflow Interrupt: On
; 0000 003A // Input Capture Interrupt: Off
; 0000 003B // Compare A Match Interrupt: Off
; 0000 003C // Compare B Match Interrupt: Off
; 0000 003D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 003E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 003F TCNT1H=0x85;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0040 TCNT1L=0xEE;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0041 ICR1H=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0042 ICR1L=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0043 OCR1AH=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0044 OCR1AL=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0045 OCR1BH=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0046 OCR1BL=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0047 
; 0000 0048 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0049 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 004A 
; 0000 004B // Global enable interrupts
; 0000 004C #asm("sei")
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 004D 
; 0000 004E puts(msg);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 004F 
; 0000 0050 while (1)
;PCODE: $00000085 VOL: 0
; 0000 0051       {
; 0000 0052       }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0053 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
