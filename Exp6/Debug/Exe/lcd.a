;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/6/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;unsigned char hr = 23, min = 58, sec = 0, cent = 0;
;
;void disp_1digit(char n) {
; 0000 001F void disp_1digit(char n) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020     lcd_putchar(n + '0');
;PCODE: $0000000F VOL: 0
;	n -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0021     lcd_putchar(' ');
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0022 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void disp_2digit(char n) {
; 0000 0024 void disp_2digit(char n) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0025     lcd_putchar(n / 10 + '0');
;PCODE: $0000001A VOL: 0
;	n -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0026     lcd_putchar(n % 10 + '0');
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0027 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;void disp() {
; 0000 0029 void disp() {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002A     lcd_gotoxy(3,1);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002B     if (hr < 10) {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 002C         disp_1digit(hr);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002D     }
; 0000 002E     else {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002F         disp_2digit(hr);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0030     }
;PCODE: $0000003B VOL: 0
; 0000 0031     lcd_putchar(':');
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0032     if (min < 10) {
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0033         disp_1digit(min);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0034     }
; 0000 0035     else {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0036         disp_2digit(min);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0037     }
;PCODE: $00000047 VOL: 0
; 0000 0038     lcd_putchar(':');
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0039     if (sec < 10) {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 003A         disp_1digit(sec);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003B     }
; 0000 003C     else {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003D         disp_2digit(sec);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003E     }
;PCODE: $00000053 VOL: 0
; 0000 003F     lcd_putchar(':');
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0040     disp_1digit(cent);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0041 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0045 {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0046 // Reinitialize Timer1 value
; 0000 0047 TCNT1H=0xCF2C >> 8;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0048 TCNT1L=0xCF2C & 0xff;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0049 
; 0000 004A if (cent < 9) cent++;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004B else if (sec < 59) {sec++; cent = 0;}
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004C else if (min < 59) {min++; sec = 0; cent = 0;}
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004D else if (hr < 23) {hr++; sec = 0; min = 0; cent = 0;}
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 004E else {hr = 0; min = 0; sec = 0; cent = 0;}
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 004F 
; 0000 0050 disp();
;PCODE: $00000086 VOL: 0
; 0000 0051 
; 0000 0052 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;void main(void)
; 0000 0055 {
;PCODE: $0000008A VOL: 0
; 0000 0056 // Declare your local variables here
; 0000 0057 
; 0000 0058 // Input/Output Ports initialization
; 0000 0059 // Port A initialization
; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 005E 
; 0000 005F // Port B initialization
; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0061 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0063 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0064 
; 0000 0065 // Port C initialization
; 0000 0066 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0067 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0068 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0069 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 006A 
; 0000 006B // Port D initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 006E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 006F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 1 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: 125.000 kHz
; 0000 0074 // Mode: Normal top=0xFFFF
; 0000 0075 // OC1A output: Disconnected
; 0000 0076 // OC1B output: Disconnected
; 0000 0077 // Noise Canceler: Off
; 0000 0078 // Input Capture on Falling Edge
; 0000 0079 // Timer Period: 0.1 s
; 0000 007A // Timer1 Overflow Interrupt: On
; 0000 007B // Input Capture Interrupt: Off
; 0000 007C // Compare A Match Interrupt: Off
; 0000 007D // Compare B Match Interrupt: Off
; 0000 007E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 007F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0080 TCNT1H=0xCF;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0081 TCNT1L=0x2C;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0082 ICR1H=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0083 ICR1L=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0084 OCR1AH=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0085 OCR1AL=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0086 OCR1BH=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0087 OCR1BL=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0088 
; 0000 0089 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 008A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 008B 
; 0000 008C // Alphanumeric LCD initialization
; 0000 008D // Connections are specified in the
; 0000 008E // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 008F // RS - PORTC Bit 0
; 0000 0090 // RD - PORTC Bit 1
; 0000 0091 // EN - PORTC Bit 2
; 0000 0092 // D4 - PORTC Bit 4
; 0000 0093 // D5 - PORTC Bit 5
; 0000 0094 // D6 - PORTC Bit 6
; 0000 0095 // D7 - PORTC Bit 7
; 0000 0096 // Characters/line: 16
; 0000 0097 lcd_init(16);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0098 
; 0000 0099 // Global enable interrupts
; 0000 009A #asm("sei")
;PCODE: $000000B3 VOL: 0
	sei
;PCODE: $000000B4 VOL: 0
; 0000 009B 
; 0000 009C lcd_gotoxy(4,0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 009D lcd_puts("LCD CLOCK");
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 009E 
; 0000 009F while (1)
;PCODE: $000000BC VOL: 0
; 0000 00A0       {
; 0000 00A1       // Place your code here
; 0000 00A2 
; 0000 00A3       }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00A4 }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0

	.DSEG
_0x11:
	.BYTE 0xA
