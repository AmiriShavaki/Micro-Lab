;/* Mahdi Amiri Shavaki
;98522148 */
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void CRLF() {
; 0000 000E void CRLF() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000F     putchar(13);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0010     putchar(10);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0011 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;void main(void)
; 0000 0014 {
;PCODE: $00000015 VOL: 0
; 0000 0015 
; 0000 0016 // USART initialization
; 0000 0017 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0018 // USART Receiver: On
; 0000 0019 // USART Transmitter: On
; 0000 001A // USART Mode: Asynchronous
; 0000 001B // USART Baud Rate: 9600
; 0000 001C UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001E UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001F UBRRH=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0020 UBRRL=0x33;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0021 
; 0000 0022 // Alphanumeric LCD initialization
; 0000 0023 // Connections are specified in the
; 0000 0024 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0025 // RS - PORTC Bit 0
; 0000 0026 // RD - PORTC Bit 1
; 0000 0027 // EN - PORTC Bit 2
; 0000 0028 // D4 - PORTC Bit 4
; 0000 0029 // D5 - PORTC Bit 5
; 0000 002A // D6 - PORTC Bit 6
; 0000 002B // D7 - PORTC Bit 7
; 0000 002C // Characters/line: 16
; 0000 002D lcd_init(16);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002E 
; 0000 002F while (1)
;PCODE: $00000022 VOL: 0
; 0000 0030       {
; 0000 0031       int i;
; 0000 0032       char name[] = "Mahdi Amiri";
; 0000 0033       char c = getchar();
; 0000 0034       putchar(c);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;	i -> Y+13
;	name -> Y+1
;	c -> Y+0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0035       lcd_putchar(c);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0036 
; 0000 0037       switch (c) {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0038             case 'C':
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0039                 lcd_clear();
;PCODE: $00000032 VOL: 0
; 0000 003A                 break;
;PCODE: $00000033 VOL: 0
; 0000 003B             case 'c':
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003C                 for (i = 0; i < 24; i++) CRLF();
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003D break;
;PCODE: $00000048 VOL: 0
; 0000 003E             case 'N':
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003F                 CRLF();
;PCODE: $0000004C VOL: 0
; 0000 0040                 for (i = 0; name[i]; i++) {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0041                     putchar(name[i]);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0042                 }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0043                 CRLF();
;PCODE: $00000065 VOL: 0
; 0000 0044                 break;
;PCODE: $00000066 VOL: 0
; 0000 0045             case 'M':
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0046                 lcd_clear();
;PCODE: $0000006A VOL: 0
; 0000 0047                 lcd_puts(name);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0048                 break;
;PCODE: $0000006D VOL: 0
; 0000 0049       }
;PCODE: $0000006E VOL: 0
; 0000 004A 
; 0000 004B       }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004C }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
